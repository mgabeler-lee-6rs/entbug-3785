// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"net/url"

	"entgo.io/bug/ent/predicate"
	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v *url.URL) predicate.User {
	vc, err := ValueScanner.URL.Value(v)
	return predicate.UserOrErr(sql.FieldEQ(FieldURL, vc), err)
}

// Age applies equality check predicate on the "age" field. It's identical to AgeEQ.
func Age(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAge, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v *url.URL) predicate.User {
	vc, err := ValueScanner.URL.Value(v)
	return predicate.UserOrErr(sql.FieldEQ(FieldURL, vc), err)
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v *url.URL) predicate.User {
	vc, err := ValueScanner.URL.Value(v)
	return predicate.UserOrErr(sql.FieldNEQ(FieldURL, vc), err)
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...*url.URL) predicate.User {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.URL.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.UserOrErr(sql.FieldIn(FieldURL, v...), err)
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...*url.URL) predicate.User {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.URL.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.UserOrErr(sql.FieldNotIn(FieldURL, v...), err)
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v *url.URL) predicate.User {
	vc, err := ValueScanner.URL.Value(v)
	return predicate.UserOrErr(sql.FieldGT(FieldURL, vc), err)
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v *url.URL) predicate.User {
	vc, err := ValueScanner.URL.Value(v)
	return predicate.UserOrErr(sql.FieldGTE(FieldURL, vc), err)
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v *url.URL) predicate.User {
	vc, err := ValueScanner.URL.Value(v)
	return predicate.UserOrErr(sql.FieldLT(FieldURL, vc), err)
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v *url.URL) predicate.User {
	vc, err := ValueScanner.URL.Value(v)
	return predicate.UserOrErr(sql.FieldLTE(FieldURL, vc), err)
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v *url.URL) predicate.User {
	vc, err := ValueScanner.URL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("url value is not a string: %T", vc)
	}
	return predicate.UserOrErr(sql.FieldContains(FieldURL, vcs), err)
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v *url.URL) predicate.User {
	vc, err := ValueScanner.URL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("url value is not a string: %T", vc)
	}
	return predicate.UserOrErr(sql.FieldHasPrefix(FieldURL, vcs), err)
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v *url.URL) predicate.User {
	vc, err := ValueScanner.URL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("url value is not a string: %T", vc)
	}
	return predicate.UserOrErr(sql.FieldHasSuffix(FieldURL, vcs), err)
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v *url.URL) predicate.User {
	vc, err := ValueScanner.URL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("url value is not a string: %T", vc)
	}
	return predicate.UserOrErr(sql.FieldEqualFold(FieldURL, vcs), err)
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v *url.URL) predicate.User {
	vc, err := ValueScanner.URL.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("url value is not a string: %T", vc)
	}
	return predicate.UserOrErr(sql.FieldContainsFold(FieldURL, vcs), err)
}

// AgeEQ applies the EQ predicate on the "age" field.
func AgeEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAge, v))
}

// AgeNEQ applies the NEQ predicate on the "age" field.
func AgeNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAge, v))
}

// AgeIn applies the In predicate on the "age" field.
func AgeIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldAge, vs...))
}

// AgeNotIn applies the NotIn predicate on the "age" field.
func AgeNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAge, vs...))
}

// AgeGT applies the GT predicate on the "age" field.
func AgeGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldAge, v))
}

// AgeGTE applies the GTE predicate on the "age" field.
func AgeGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAge, v))
}

// AgeLT applies the LT predicate on the "age" field.
func AgeLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldAge, v))
}

// AgeLTE applies the LTE predicate on the "age" field.
func AgeLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAge, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
